" vimrc
"
" vim-plug {{{

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" SQL utilities
Plug 'vim-scripts/SQLUtilities'
Plug 'vim-scripts/Align'

" google codefmt
Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'
Plug 'google/vim-glaive'

" ale
Plug 'w0rp/ale'

" supertab
Plug 'ervandew/supertab'

" snippets
Plug 'SirVer/ultisnips'

" vim/tmux navigation
Plug 'christoomey/vim-tmux-navigator'

" Syntax python 
Plug 'hdima/python-syntax'

" copy to tmux session
Plug 'jpalardy/vim-slime'
"
" surround!
Plug 'tpope/vim-surround'

" better indent Python
Plug 'hynek/vim-python-pep8-indent'

" plugin manager
Plug 'gmarik/Vundle.vim'

" completion
Plug 'Valloric/YouCompleteMe'

" colorschemes
Plug 'freeo/vim-kalisi'

" Python folding
Plug 'tmhedberg/SimpylFold'

" complete pairs (e.g. parentheses)
Plug 'cohama/lexima.vim'

" dockerfile syntax highlighting
Plug 'docker/docker', {'rtp': '/contrib/syntax/vim/'}

call plug#end()

" }}}

" Settings {{{
"
set nocompatible
"
" YCM settings
let g:ycm_python_binary_path = 'python'

" turn on omnicomplete
set omnifunc=syntaxcomplete#Complete

" set the colorscheme
"
set t_Co=256
set t_ut=
" in case t_Co alone doesn't work, add this as well:
let &t_AB="\e[48;5;%dm"
let &t_AF="\e[38;5;%dm"

colorscheme kalisi
set background=light

" So backspace works as expected in OSX
set backspace=2

" display line numbers
set number

" line number, column number, virtual column number, and relative position in
" status line
set ruler

" shows info about the current command, e.g. shows number of lines selected
" when using ctrl-V
set showcmd

" no more backup files (files with ~ extension)
set nobackup

" no swapfile
set noswapfile

" display unprintible characters like $ at end of line
set list

" you can have unwritten changes in a file and open a new file
set hidden

" search highlighting on by default
set hlsearch

filetype plugin indent on
syntax enable

set wildmenu
set cursorline cursorcolumn
set showmatch
set incsearch
set hlsearch
set foldenable
set modelines=1


" }}}

" Mappings  {{{
" misc {{{
" visual mode dot command
xnoremap . :normal .<CR>

" visual selection to clipboard
xnoremap <C-c> "+y

" paste from clipboard
nnoremap <leader>pp "+p

" indent one space at a time regardless of shiftwidth
xnoremap <C-l> :s/^/ /<CR>gv
xnoremap <C-h> :s/^\s//<CR>gv

" this allows you to save a file as the root user even if you didn't
" open the file with root privileges.
cmap w!! w !sudo tee % >/dev/null

" switch behavior of j/gj and k/gk
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" source the vimrc
nnoremap <leader>so :so $MYVIMRC<CR>zv

" edit my vimrc
nnoremap <leader>ev :e $MYVIMRC<CR>

" quick mapping for toggling search highlight
nnoremap <Leader>nhl :nohlsearch<CR>
nnoremap <Leader>hl :set hlsearch<CR>

" toggle fold with spacebar
nnoremap <space> za
" }}}
" }}}

" FT specific settings {{{

" python {{{
" PEP8
let python_highlight_all=1
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufRead,BufNewFile *.py,*.pyw,*.c,*.h 
    \ highlight BadWhitespace ctermbg=red guibg=darkred |
    \ match BadWhitespace /\s\+$/

" }}}
"
" bash {{{
au BufNewFile,BufRead *.sh
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufRead,BufNewFile *.sh, 
    \ highlight BadWhitespace ctermbg=red guibg=darkred |
    \ match BadWhitespace /\s\+$/

" }}}
"
" yaml {{{
au BufNewFile,BufRead *.yaml,*.yml
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix
" }}}
"
" markdown {{{
au BufNewFile,BufRead *.md
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix
" }}}
"
" Dockerfile {{{
au BufNewFile,BufRead Dockerfile
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix
" }}}

" }}}

" plugin settings and mappings {{{
"
" YCM config {{{
")
let g:ycm_goto_buffer_command = 'horizontal-split'
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_server_python_interpreter = 'python'
let g:ycm_autoclose_preview_window_after_completion=0
let g:ycm_autoclose_preview_window_after_insertion=1
map <leader>go  :YcmCompleter GoToDefinitionElseDeclaration<CR>
map <leader>ge  :YcmCompleter GetDoc<CR>
map! <leader>ge  <Esc>:YcmCompleter GetDoc<CR>a
"
"}}}
" Python folding config {{{

let g:SimpylFold_docstring_preview = 1

"}}}
" vim-slime {{{

let g:slime_target = "tmux"
let g:slime_python_ipython = 0

"}}}
" supertab {{{

let g:SuperTabDefaultCompletionType = '<C-n>'
let g:SuperTabContextDefaultCompletionType = "<C-n>"
let g:SuperTabCrMapping = 0

"}}}
" ultisnips {{{
" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

"}}}


" vim:foldmethod=marker:foldlevel=0
